(c) Naive Instruction in Testing
(d) Thought Instruction in Testing
Figure 4: The thought instruction mitigates code hallucinations during the coding and testing phases.
Instead of providing generic instructions, thought instruction involves role swapping to inquire about
unimplemented methods or explain feedback messages caused by bugs. This step allows for a clearer
understanding of the existing code and identifies the specific gaps that need to be addressed. By
gaining this awareness, the roles can then switch back, and the instructor can provide more specific
instructions to guide the programmer accurately.
we introduce a self-reflection mechanism, which involves extracting and retrieving memories. To
implement this mechanism, we enlist a “pseudo self” as a new questioner and initiate a fresh chat. The
pseudo questioner informs the current assistant of all the historical records from previous dialogues
and requests a summary of the conclusive information from the dialogue, as shown in Figure 3(c).
This mechanism effectively encourages the assistant to reflect upon the decisions proposed and
discussed during the dialogue.
2.3
Coding
The coding phase involves three predefined roles: CTO, programmer, and art designer. The chat chain
decomposes the coding phase into sequential atomic chatting tasks, such as generating complete codes
(CTO and programmer) and devising a graphical user interface (designer and programmer). Based on
the main designs discussed in the previous phase, the CTO instructs the programmer to implement a
software system using markdown format. The programmer generates codes in response and extracts
the corresponding codes based on markdown format. The designer proposes a user-friendly graphical
user interface (GUI) that uses graphical icons for user interaction instead of text-based commands.
Then, the designer creates visually appealing graphics using external text-to-image tools [35], which
the programmer incorporates into the GUI design using standard toolkits.
Code Management
To handle complex software systems, CHATDEV utilizes object-oriented
programming languages like Python. The modularity of object-oriented programming allows for self-
contained objects, aiding troubleshooting and collaborative development. Reusability enables code
reuse through inheritance, reducing redundancy. We introduce the “version evolution” mechanism
to restrict visibility to the latest code version between roles, discarding earlier code versions from
the memory stream. The programmer manages the project using Git-related commands. Proposed
code modifications and changes increment the software version by 1.0. Version evolution gradually
eliminates code hallucinations. The combination of object-oriented programming and version
evolution is suitable for dialogues involving long code segments.
Thought Instruction
Traditional question answering can lead to inaccuracies or irrelevant informa-
tion, especially in code generation, where naive instructions may result in unexpected hallucinations.
6