@
g
g
g@
g
y@
g
ABSTRACT
Database administrators (DBAs) play a crucial role in managing,
maintaining and optimizing a database system to ensure data avail-
ability, performance, and reliability. However, it is hard and tedious
for DBAs to manage a large number of database instances (e.g., mil-
lions of instances on the cloud databases). Recently large language
models (LLMs) have shown great potential to understand valuable
documents and accordingly generate reasonable answers. Thus, we
propose D-Bot, a LLM-based database administrator that can con-
tinuously acquire database maintenance experience from textual
sources, and provide reasonable, well-founded, in-time diagnosis
and optimization advice for target databases. This paper presents a
revolutionary LLM-centric framework for database maintenance,
including (𝐴���) database maintenance knowledge detection from doc-
uments and tools, (𝐴���𝐴���) tree of thought reasoning for root cause
analysis, and (𝐴���𝐴���𝐴���) collaborative diagnosis among multiple LLMs.
Our preliminary experimental results that D-Bot can efficiently
and effectively diagnose the root causes and our code is available
at github.com/TsinghuaDatabaseGroup/DB-GPT.
1
INTRODUCTION
Limitations of DBAs. Currently, most companies still rely on
DBAs for database maintenance (DM, e.g., tuning, configuring,
diagnosing, optimizing) to ensure high performance, availability
and reliability of the databases. However, there is a significant gap
between DBAs and DM tasks. First, it takes a long time to train a DBA.
There are numerous relevant documents (e.g., administrator guides),
which can span over 10,000 pages for just one database product
and consumes DBAs several years to partially grasp the skills by
applying in real practice. Second, it is hard to obtain enough DBAs
to manage a large number of database instances, e.g. millions of
instance on cloud databases. Third, a DBA may not provide in-time
response in emergent cases (especially for correlated issues across
multiple database modules) and cause great financial losses.
Limitations of Database Tools. Many database products are
equipped with semi-automatic maintenance tools to relieve the
pressure of human DBAs [5, 6, 10–12]. However, they have sev-
eral limitations. First, they are built by empirical rules [4, 24] or
small-scale ML models (e.g., classifiers [13]), which have poor text
processing capability and cannot utilize available documents tol
Query 
Rewriter
Query 
Planner
Query 
Executor 
D-Bot
Rewrite logical query …
Add lacking indexes …
Documents
Optimize query plan …
System Configuration
Thought: High memory usage seems to be caused by 
poor join performance and much inactive memory 
Reasoning: Poor joins can be solved by plan optimization
Action: optimize_query_plan
Figure 1: LLM As DBA
on the initial analysis results. This capability is vital to detect useful
information in complex cases.
Our Vision: A Human-Beyond Database Adminstrator. To this
end, we aim to build a human-beyond “DBA” that can tirelessly learn
from documents (see Figure 1), which, given a set of documents,
automatically (1) learns experience from documents, (2) obtains
status metrics by interacting with the database, (3) reasons about
possible root causes with the abnormal metrics, and (4) accordingly
gives optimization advice by calling proper tools.
Challenges. Recent advances in Large Language Models (LLMs)
have demonstrated superiority in understanding natural language,
generating basic codes, and using external tools. However, leverag-
ing LLM to design a “human-beyond DBA” is still challenging.
(1) Experience learning from documents. Just like human learners
taking notes in classes, although LLMs have undergone training on
vast corpus, important knowledge points (e.g., diagnosis experience)
cannot be easily utilized without careful attention. However, most
texts are of long documents (with varying input lengths and section
correlations) and different formats of the extracted experience can
greatly affect the utilization capability of the LLM.
(2) Reasoning by interacting with database. With the extracted
arXiv:2308.05481v2  [cs.DB]  11 Aug 2023