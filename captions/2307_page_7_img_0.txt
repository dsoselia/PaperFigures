resource for users. Once the dependencies are installed, a human client can execute the software
using a suitable interpreter.
70 tasks1, including both specific and relatively abstract cases, to serve as the basis for analysis in our
CHATDEV software development.
Software Statistics
We performed a statistical analysis on the software systems generated by
CHATDEV. Key metrics, including the total dialogue turns, consumed tokens, software files, image
assets, and version updates, were examined. Table 1 presents these metrics, providing valuable
insights into the communication-based software development process. It offers a comprehensive
overview of CHATDEV’s development, covering aspects such as versioning, file composition, code
complexity, and development iterations.
Table 1: The statistical analysis of CHATDEV’s software development, including minimum (Min),
maximum (Max), and average (Avg.) values for various aspects.
Min
Max
Avg.
# Code Files
2.00
8.00
4.26
# Asset Files
0.00
21.00
8.74
# Document Files
4.00
5.00
4.04
# Lines of Source Codes
39.00
359.00
131.61
# Lines of Dependencies
1.00
5.00
2.90
# Lines of User Manual
31.00
232.00
53.96
# Version Updates
5.00
42.00
13.23
# Software Re-development
1.00
5.00
1.40
The generated software typically includes 2 to 8 code files, with an average of 4.26 files. Asset
files, created by the art designer using external tools [35], range from 0 to 21, with an average
of 8.74 files. Here are some examples of concise text descriptions through which programmers
request the designer to create images, such as “The text entry field where the user can
input their data”, “The background image for the financial dashboard”, and “The
image representing the player character in the game”. The software is accompanied
by 4 to 5 document files on average, such as dependency requirements specifications, user manuals,
development logs, and software meta information.
The software developed by CHATDEV typically ranges from 39 to 359 lines of code, with an average of
131.61 lines2. The data suggests that CHATDEV tends to produce software with relatively small-scale
code. This is partly because the design of object-oriented programming, whose reusability enables
code reuse through inheritance, reducing redundancy. We also noted that when the user specified a
less specific task, the resulting source code generated by CHATDEV tended to be shorter, averaging
around 110.97 lines. This is primarily attributed to CHATDEV employing high-level logic to fulfill
non-specific tasks, often generating code that focuses on providing print information for interface
representation. Therefore, we recommend providing CHATDEV with specific instructions, such as
desired software features, system rules, UI design, and other detailed specifications. By providing
1For exmaple, “Implement a Gomoku game using Python, incorporating an AI opponent with varying
difficulty levels” or “Create a Python program to develop an interactive weather dashboard”.
2This count includes only lines that contain meaningful code, excluding blank lines.
8