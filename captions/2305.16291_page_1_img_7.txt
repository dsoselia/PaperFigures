playground with endless possibilities [23]. Minecraft requires players to explore vast, procedurally
generated 3D terrains and unlock a tech tree using gathered resources. Human players typically start
by learning the basics, such as mining wood and cooking food, before advancing to more complex
tasks like combating monsters and crafting diamond tools. We argue that an effective lifelong learning
agent should have similar capabilities as human players: (1) propose suitable tasks based on its
current skill level and world state, e.g., learn to harvest sand and cactus before iron if it finds itself in
a desert rather than a forest; (2) refine skills based on environmental feedback and commit mastered
skills to memory for future reuse in similar situations (e.g. fighting zombies is similar to fighting
spiders); (3) continually explore the world and seek out new tasks in a self-driven manner.
Towards these goals, we introduce VOYAGER, the first LLM-powered embodied lifelong learning
agent to drive exploration, master a wide range of skills, and make new discoveries continually
without human intervention in Minecraft. VOYAGER is made possible through three key modules
(Fig. 2): 1) an automatic curriculum that maximizes exploration; 2) a skill library for storing
and retrieving complex behaviors; and 3) a new iterative prompting mechanism that generates
executable code for embodied control. We opt to use code as the action space instead of low-level
motor commands because programs can naturally represent temporally extended and compositional
actions [16, 22], which are essential for many long-horizon tasks in Minecraft. VOYAGER interacts
with a blackbox LLM (GPT-4 [35]) through prompting and in-context learning [36–38]. Our approach
bypasses the need for model parameter access and explicit gradient-based training or finetuning.
More specifically, VOYAGER attempts to solve progressively harder tasks proposed by the automatic
curriculum, which takes into account the exploration progress and the agent’s state. The curriculum
is generated by GPT-4 based on the overarching goal of “discovering as many diverse things as
possible”. This approach can be perceived as an in-context form of novelty search [39, 40]. VOYAGER
incrementally builds a skill library by storing the action programs that help solve a task successfully.
2