the nature of code generation, where the generated code tends to overlook minor details. However, in
the context of code generation, ensuring the code’s executability becomes crucial. Fortunately, the
thought instruction mechanism proposed in this paper effectively tackles these issues by compelling
the reviewer to identify incomplete methods and requiring the programmer to fill them. This
mechanism can be applied to other scenarios where tasks are completed based on large models
but with certain parts missing. Interestingly, the reviewer also emphasizes the importance of code
robustness. They underscore considerations for handling potential exceptions in the future and offer
hints on avoiding duplicate categories (3.03%). Additionally, the reviewer provides suggestions
regarding unused classes in the code (1.52%), identifies infinite loops (1.52%), and emphasizes the
necessity of proper environment initialization (1.52%).
Tester-Programmer Dialogue Analysis
In a similar fashion, we analyze the debug dialogue
between the tester and the programmer during the testing phase and categorize the main types of
bugs encountered. The results are presented in Figure 8. As observed in the figure, the most frequent
debug issue between the tester and the programmer is “module not found” (45.76%), accounting
for nearly half of the cases. This reflects the model’s tendency to overlook very fine details, despite
their simplicity. Fortunately, with the thought instruction mechanism proposed in this paper, such
bugs can often be easily resolved by importing the required class or method. The second most
common types of errors are “attribute error” and “unknown option”, each accounting for
15.25% of the cases. “attribute error” refers to errors in the usage of class attributes, while
“unknown option” indicates errors in the parameters of method calls. Another common type of error
is “import error” which is similar to “module not found” and is primarily caused by mistakes
in the import statements, such as importing the wrong class or using an incorrect import path. In
addition to these common error types, CHATDEV has the capability to detect relatively rare error
types such as improperly initialized GUI (5.08%), incorrect method calling (1.69%), missing file
dependencies (1.69%), unused modules (1.69%), decorator syntax errors (1.69%), and more.
Case Study
Figure 9 showcases an example of CHATDEV developing a Gomoku game (a.k.a.
also known as “Five in a Row” and “Gobang”). In the left, we see the result of a naive software
created without GUI. This version of the game can only be played through a command terminal,
limiting its interactivity and overall enjoyment. In contrast, by incorporating GUI design, CHATDEV
Figure 8: Distribution of Tester’s Suggestions. Each color in the pie chart represents a specific
category of bugs provided by the tester.
11