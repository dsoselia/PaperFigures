Figure 4: Multi-Agent System: Fiction Studio.
The execution logic of a (multi) agent system based on AGENTS is very intuitive. As illustrated in
Code 2, in each iteration, the SOP first decides the state transition and selects the next agent to act
based on the agents and the environment. The agent then takes an action based on its state and the
environment. Then the environment updates itself based on the new action. Finally, if a workflow
requires dynamically adjusting the plan based on the intermediate execution results, one can parse
the output from an action, define a new state and add it into the current SOP.
3.4
Implementation Details of Core Features
Long-short Term Memory
: AGENTS implements long-short term memories for language agents
following Zhou et al. [2023a]. Specifically, long-term memories are action histories and are embedded
by sentence-transformers [Reimers and Gurevych, 2019], stored in a VectorDB, and queried via
semantic search. Short-term memories, or working memories, are in natural language form and
updated by an LLM via a carefully tuned prompt.
Tool Usage & Web Navigation
:
AGENTS supports tool usage and web navigation via
ToolComponents.
For each external tool or API, developer can wrap the API call in
theToolComponent.func() method. For complicated tools of which the API call is context-
dependent, AGENTS integrates the the “Function-calling” feature of OpenAI’s GPT APIs to let
LLMs decide how to use the tools. Web navigation is achieved by implementing web search as a
specialized tool.
Multi-Agent Communication
: Different from most existing frameworks for multi-agent systems
that use pre-defined rules (e.g., let each agent act in a sequential order) to control the order for agents’
action, AGENTS includes a controller function that dynamically decides which agent will perform the
next action using an LLM by considering the previous actions, the environment, and the target of the
current states. This makes multi-agent communication more flexible.
Human-Agent Interaction
: AGENTS supports human-agent interaction in multi-agent systems by
allowing human users to change the “is_human” field for a certain agent in the config file to “True”.
In this case, the user can play the role of the agent by himself/herself and input his/her own actions
and interact with other language agents in the environment.
6