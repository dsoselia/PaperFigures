Figure 1: A comparative depiction of the software development SOP between MetaGPT and real-world human
team. SOP defines job roles and workflows in society. In software engineering, the waterfall method outlines steps from
analysis to delivery, promoting teamwork across roles. The MetaGPT approach showcases its ability to decompose high-
level tasks into detailed actionable components handled by distinct roles (ProductManager, Architect, ProjectManager,
Engineer, QA Engineer), thereby facilitating role-specific expertise and coordination. This methodology mirrors human
software development teams. The diagram illustrates how MetaGPT is designed to handle complex tasks and promote
clear role delineations, making it a valuable tool for complex software development scenarios
2
Related Work
LLM-based Automatic Programming
Automatic programming is a hot research topic in NLP. Researchers trained
classifiers to identify and reject erroneous programs [26] and developed the mechanism of iterative feedback to generate
embedded control programs [27]. There are also state-of-the-art methods that utilize majority voting to select candidate
programs [28] and use execution results to improve program synthesis [29, 30]. More recently, agents based on
LLMs [31, 32, 33] have facilitated the development of automatic programming. Li et al. [2] proposed a simple role-play
agent framework that realizes automatic programming based on one-sentence user requirements through the interaction
of two roles. Moreover, Qian et al. [10] utilized multiple agents for software development, but they did not incorporate
advanced human teamwork experience. Although existing multi-agent cooperation [2, 10] has currently improved
productivity, they did not fully draw on efficient workflows in human production practices. Thus, they are hard to solve
more complex software engineering problems.
Besides, A series of the fundamental works on which this paper is based need to be mentioned. ReAct [31] utilizes
Chain of Thought prompts [34] to generate reasoning trajectories and action plans with LLMs. Reflexion [32] infers
more intuitive future actions through self-reflection. Both papers illustrate how the Re-Act style loop of reasoning is a
good design paradigm for empowering LLM-based agents. ToolFormer [35] can teach themselves to use external tools
via simple APIs. SWIFTSAGE [33] assigns difficult situations to slow thinking to deal with, while normal situations
are dealt with directly by fast thinking. Based on the above design, we emphasize that role division of labor is helpful
for complex task processing.
Multi-agent Collaboration
Prior works have explored using multiple LLMs in a collaborative setting to solve
complex tasks [36, 10]. The motivation is that by cross-agent interaction, LLMs can collectively exhibit enhanced
performance by aggregating their strengths. There have been many previous explorations of multi-agent, including
collective thinking [4, 5, 6, 7], conversation dataset collection [2, 37], sociological phenomenon research [1, 38],
collaboration for efficiency [3, 8, 2, 10]. (i) Collective thinking: many advanced works [4, 5, 6, 7] enhanced the task
solving capabilities of LLM by integrating the multiple-agent discussion. (ii) Conversation dataset collection: Wei et
al. [37] and Li et al. [2] built a conversation datasets through Role Playing. (iii) Sociological phenomenon research:
Park et al. [1] constructed a town of 25 agents, realizing simple language interaction, social cognition, and memory
of the agents, while there is a lack of cooperation and production. Akata et al. [38] studied LLM cooperation and
3